{
	"info": {
		"_postman_id": "c7c2a3b4-ac6a-4719-8edd-37d2b558ce5e",
		"name": "SERU BE TEST",
		"description": "Created by: Erick Yudha Pratama Sukku (erickyudha18@gmail.com)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15723881",
		"_collection_link": "https://www.postman.com/avionics-operator-15039293/workspace/public-ws/collection/15723881-c7c2a3b4-ac6a-4719-8edd-37d2b558ce5e?action=share&source=collection_link&creator=15723881"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"joe\",\r\n    \"password\": \"biden\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"joes\",\r\n    \"password\": \"biden\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "[User] Get self data",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"me"
							]
						}
					},
					"response": []
				}
			],
			"description": "Auth is using bearer token\n\nFor login register use this format:\n\n``` json\n{\n\t\"name\": \"joe\",\n    \"password\": \"biden\"\n}\n\n ```"
		},
		{
			"name": "User",
			"item": [
				{
					"name": "[Admin] Get users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/user?limit=100&offset=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"user"
							],
							"query": [
								{
									"key": "limit",
									"value": "100",
									"description": "Limit number of rows returned"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Row offset"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "[Admin] Get user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/user/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"user",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "User ID"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "[Admin] Post user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"among\",\n    \"password\": \"us\",\n    \"is_admin\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/user",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"user"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "[User] Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"admidadwa\",\n    \"password\": \"biden\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/user/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"user",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "8",
									"description": "User ID (Note: User can only edit self and cant edit ID)"
								}
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "[Admin] Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/user/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"user",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "4",
									"description": "User ID"
								}
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			],
			"description": "Response format:\n\n``` json\n        {\n            \"id\": 2,\n            \"name\": \"user\",\n            \"is_admin\": false,\n            \"createdAt\": \"2024-07-03T12:27:25.575Z\",\n            \"updatedAt\": \"2024-07-03T12:27:25.575Z\"\n        }\n\n ```\n\nCreate/Update/Filter field:\n\n``` json\n        {\n            \"id\": 2,\n            \"name\": \"user\",\n            \"password\": \"user\"\n        }\n\n ```"
		},
		{
			"name": "Pricelist",
			"item": [
				{
					"name": "Get pricelists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/pricelist?limit=100&offset=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"pricelist"
							],
							"query": [
								{
									"key": "limit",
									"value": "100",
									"description": "Limit number of rows returned"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Row offset"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get pricelist by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/pricelist/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"pricelist",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Pricelist ID"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "[Admin] Post pricelist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/pricelist",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"pricelist"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "[Admin] Update pricelist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/pricelist/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"pricelist",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "Pricelist ID"
								}
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "[Admin] Delete pricelist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/pricelist/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"pricelist",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Pricelist ID"
								}
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			],
			"description": "Response format:\n\n``` json\n        {\n            \"id\": 4,\n            \"code\": \"CRV2020\",\n            \"price\": \"32000\",\n            \"year_id\": 1,\n            \"model_id\": 4,\n            \"createdAt\": \"2024-07-03T12:27:25.644Z\",\n            \"updatedAt\": \"2024-07-03T12:27:25.644Z\",\n            \"VehicleYear\": {\n                \"id\": 1,\n                \"year\": 2020,\n                \"createdAt\": \"2024-07-03T12:27:25.615Z\",\n                \"updatedAt\": \"2024-07-03T12:27:25.615Z\"\n            },\n            \"VehicleModel\": {\n                \"id\": 4,\n                \"name\": \"CR-V\",\n                \"type_id\": 2,\n                \"createdAt\": \"2024-07-03T12:27:25.627Z\",\n                \"updatedAt\": \"2024-07-03T12:27:25.627Z\"\n            }\n        }\n\n ```\n\nCreate/Update/Filter field:\n\n``` json\n        {\n            \"id\": 4,\n            \"code\": \"CRV2020\",\n            \"price\": \"32000\",\n            \"year_id\": 1,\n            \"model_id\": 4\n        }\n\n ```"
		},
		{
			"name": "Vehicle Brand",
			"item": [
				{
					"name": "Get v brands",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/vehicle-brand?limit=100&offset=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"vehicle-brand"
							],
							"query": [
								{
									"key": "limit",
									"value": "100",
									"description": "Limit number of rows returned"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Row offset"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get v brand by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/vehicle-brand/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"vehicle-brand",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Vehicle brand ID"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "[Admin] Post v brand",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/vehicle-brand",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"vehicle-brand"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "[Admin] Update v brand",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/vehicle-brand/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"vehicle-brand",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "Vehicle brand ID"
								}
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "[Admin] Delete v brand",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/vehicle-brand/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"vehicle-brand",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Vehicle brand ID"
								}
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			],
			"description": "Response format:\n\n``` json\n        {\n            \"id\": 1,\n            \"name\": \"Toyota\",\n            \"createdAt\": \"2024-07-03T12:27:25.590Z\",\n            \"updatedAt\": \"2024-07-03T12:27:25.590Z\"\n        }\n\n ```\n\nCreate/Update/Filter field:\n\n``` json\n        {\n            \"id\": 1,\n            \"name\": \"Toyota\",\n        }\n\n ```"
		},
		{
			"name": "Vehicle Type",
			"item": [
				{
					"name": "Get v types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/vehicle-type?limit=100&offset=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"vehicle-type"
							],
							"query": [
								{
									"key": "limit",
									"value": "100",
									"description": "Limit number of rows returned"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Row offset"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get v type by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/vehicle-type/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"vehicle-type",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Vehicle type ID"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "[Admin] Post v type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/vehicle-type",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"vehicle-type"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "[Admin] Update v type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/vehicle-type/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"vehicle-type",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "Vehicle type ID"
								}
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "[Admin] Delete v type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/vehicle-type/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"vehicle-type",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "Vehicle type ID"
								}
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			],
			"description": "Response format:\n\n``` json\n        {\n            \"id\": 1,\n            \"name\": \"Sedan\",\n            \"brand_id\": 1,\n            \"createdAt\": \"2024-07-03T12:27:25.603Z\",\n            \"updatedAt\": \"2024-07-03T12:27:25.603Z\",\n            \"VehicleBrand\": {\n                \"id\": 1,\n                \"name\": \"Toyota\",\n                \"createdAt\": \"2024-07-03T12:27:25.590Z\",\n                \"updatedAt\": \"2024-07-03T12:27:25.590Z\"\n            }\n        }\n\n ```\n\nCreate/Update/Filter field:\n\n``` json\n        {\n            \"id\": 1,\n            \"name\": \"Sedan\",\n            \"brand_id\": 1,\n        }\n\n ```"
		},
		{
			"name": "Vehicle Model",
			"item": [
				{
					"name": "Get v models",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/vehicle-model?limit=100&offset=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"vehicle-model"
							],
							"query": [
								{
									"key": "limit",
									"value": "100",
									"description": "Limit number of rows returned"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Row offset"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get v model by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/vehicle-model/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"vehicle-model",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Vehicle model ID"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "[Admin] Post v model",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/vehicle-model",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"vehicle-model"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "[Admin] Update v model",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Camry\",\n    \"type_id\": 1\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/vehicle-model/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"vehicle-model",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Vehicle model ID"
								}
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "[Admin] Delete v model",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/vehicle-model/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"vehicle-model",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "",
									"description": "Vehicle model ID"
								}
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			],
			"description": "Response format:\n\n``` json\n        {\n            \"id\": 1,\n            \"name\": \"Camry\",\n            \"type_id\": 1,\n            \"createdAt\": \"2024-07-03T12:27:25.627Z\",\n            \"updatedAt\": \"2024-07-03T12:27:25.627Z\",\n            \"VehicleType\": {\n                \"id\": 1,\n                \"name\": \"Sedan\",\n                \"brand_id\": 1,\n                \"createdAt\": \"2024-07-03T12:27:25.603Z\",\n                \"updatedAt\": \"2024-07-03T12:27:25.603Z\"\n            }\n        }\n\n ```\n\nCreate/Update/Filter field:\n\n``` json\n        {\n            \"id\": 1,\n            \"name\": \"Camry\",\n            \"type_id\": 1,\n        }\n\n ```"
		},
		{
			"name": "Vehicle Year",
			"item": [
				{
					"name": "Get years",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/vehicle-year?limit=100&offset=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"vehicle-year"
							],
							"query": [
								{
									"key": "limit",
									"value": "100",
									"description": "Limit number of rows returned"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Row offset"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get year by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/vehicle-year/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"vehicle-year",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2",
									"description": "Vehicle year ID"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "[Admin] Post year",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"year\": 2020\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/pricelist",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"pricelist"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "[Admin] Update year",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"year\": 2020\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/vehicle-year/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"vehicle-year",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "[Admin] Delete year",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/vehicle-year/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"vehicle-year",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			],
			"description": "Response format:\n\n``` json\n{\n            \"id\": 1,\n            \"year\": 2020,\n            \"createdAt\": \"2024-07-03T12:27:25.615Z\",\n            \"updatedAt\": \"2024-07-03T12:27:25.615Z\"\n}\n\n ```\n\nCreate/Update/Filter field:\n\n``` json\n{\n            \"id\": 1,\n            \"year\": 2020,\n}\n\n ```"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{admin_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "http://localhost:8000"
		},
		{
			"key": "user_token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NiwibmFtZSI6ImpvZXMiLCJpc19hZG1pbiI6ZmFsc2UsImVuY19wYXNzIjoiJDJhJDEwJGJBQUZWb1Y1VGNSNXU3NUVsR3Jmby5VOWxRTDVKSS5XNlh0cDZBTS8wYXZNZlREZHVMZno2IiwiY3JlYXRlZEF0IjoiMjAyNC0wNy0wNVQwOTo1MDo1Ny40MDRaIiwidXBkYXRlZEF0IjoiMjAyNC0wNy0wNVQwOTo1MDo1Ny40MDRaIiwiaWF0IjoxNzIwMTczMzkxfQ.xsqyRRq2_K_JxTWZGIFRZ7BKCXLr0GDWJF5fmXPDBA0",
			"type": "string"
		},
		{
			"key": "admin_token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtZSI6ImFkbWluIiwiaXNfYWRtaW4iOnRydWUsImVuY19wYXNzIjoiJDJhJDEwJEV6TFZ5SUg3TEt5cUpsR0V0QXVoZGVxUWNLYk0xSXd5S0tPWmZXVk9FL3lNTml5OXF3QlY2IiwiY3JlYXRlZEF0IjoiMjAyNC0wNy0wM1QxMjoyNzoyNS40NTlaIiwidXBkYXRlZEF0IjoiMjAyNC0wNy0wNVQwOTozMTozNS41NDZaIiwiaWF0IjoxNzIwMTczNDI5fQ.77REJABE9Irj8hD_GO-dyJMvzhFHsh322boseBegLpY",
			"type": "string"
		}
	]
}